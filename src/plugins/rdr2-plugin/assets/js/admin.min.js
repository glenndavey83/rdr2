(function(document, $) {
    var proto = $.fn, details, isOpera = Object.prototype.toString.call(window.opera) == "[object Opera]", isDetailsSupported = function(doc) {
        var el = doc.createElement("details"), fake, root, diff;
        if (!("open" in el)) {
            return false;
        }
        root = doc.body || function() {
            var de = doc.documentElement;
            fake = true;
            return de.insertBefore(doc.createElement("body"), de.firstElementChild || de.firstChild);
        }();
        el.innerHTML = "<summary>a</summary>b";
        el.style.display = "block";
        root.appendChild(el);
        diff = el.offsetHeight;
        el.open = true;
        diff = diff != el.offsetHeight;
        root.removeChild(el);
        if (fake) {
            root.parentNode.removeChild(root);
        }
        return diff;
    }(document), toggleOpen = function($details, $detailsSummary, $detailsNotSummary, toggle) {
        var isOpen = $details.prop("open"), close = isOpen && toggle || !isOpen && !toggle;
        if (close) {
            $details.removeClass("open").prop("open", false).triggerHandler("close.details");
            $detailsSummary.attr("aria-expanded", false);
            $detailsNotSummary.hide();
        } else {
            $details.addClass("open").prop("open", true).triggerHandler("open.details");
            $detailsSummary.attr("aria-expanded", true);
            $detailsNotSummary.show();
        }
    };
    proto.noSelect = function() {
        var none = "none";
        return this.bind("selectstart dragstart mousedown", function() {
            return false;
        }).css({
            MozUserSelect: none,
            msUserSelect: none,
            webkitUserSelect: none,
            userSelect: none
        });
    };
    if (isDetailsSupported) {
        details = proto.details = function() {
            return this.each(function(index) {
                var $details = $(this), $summary = $("summary", $details).first();
                if (!$details.attr("id")) {
                    $details.attr("id", "details-id-" + index);
                }
                $details.attr("role", "group");
                $summary.attr({
                    role: "button",
                    "aria-expanded": $details.prop("open"),
                    "aria-controls": $details.attr("id")
                }).on("click", function() {
                    var close = $details.prop("open");
                    $summary.attr("aria-expanded", !close);
                    $details.triggerHandler((close ? "close" : "open") + ".details");
                });
            });
        };
        details.support = isDetailsSupported;
    } else {
        details = proto.details = function() {
            return this.each(function(index) {
                var $details = $(this), $detailsSummary = $("summary", $details).first(), $detailsNotSummary = $details.children(":not(summary)"), $detailsNotSummaryContents = $details.contents(":not(summary)");
                if (!$details.attr("id")) {
                    $details.attr("id", "details-id-" + index);
                }
                $details.attr("role", "group");
                if (!$detailsSummary.length) {
                    $detailsSummary = $("<summary>").text("Details").prependTo($details);
                }
                if ($detailsNotSummary.length != $detailsNotSummaryContents.length) {
                    $detailsNotSummaryContents.filter(function() {
                        return this.nodeType == 3 && /[^ \t\n\f\r]/.test(this.data);
                    }).wrap("<span>");
                    $detailsNotSummary = $details.children(":not(summary)");
                }
                $details.prop("open", typeof $details.attr("open") == "string");
                toggleOpen($details, $detailsSummary, $detailsNotSummary);
                $detailsSummary.attr({
                    role: "button",
                    "aria-controls": $details.attr("id")
                }).noSelect().prop("tabIndex", 0).on("click", function() {
                    $detailsSummary.focus();
                    toggleOpen($details, $detailsSummary, $detailsNotSummary, true);
                }).keyup(function(event) {
                    if (32 == event.keyCode || 13 == event.keyCode && !isOpera) {
                        event.preventDefault();
                        $detailsSummary.click();
                    }
                });
            });
        };
        details.support = isDetailsSupported;
    }
})(document, jQuery);

(function($) {
    var $body = $("body"), $tabsContainer = $(".luckytabs"), $dateRanges = $("#DateRangeFilters"), accordionMenu = $(".accordion-menu");
    $(document).ready(function() {
        console.log("Document ready!");
        $("html").removeClass("no-js");
        if ($("details").length) setupDetailSummary();
        if ($(".luckytabs.toptabs").length) {
            $(".luckytabs.toptabs").easytabs({
                animate: false,
                tabActiveClass: "nav-tab-active",
                updateHash: true
            });
            $(window).on("hashchange", function() {
                hashslice = location.hash.slice(1);
                if (hashslice.length > 0) $(".luckytabs.toptabs").easytabs("select", hashslice); else $(".luckytabs.toptabs").easytabs("select", $(".luckytabs li:first a").attr("href"));
            });
        }
        if ($(".luckytabs.sidetabs").length) {
            $(".luckytabs.sidetabs").easytabs({
                animate: false,
                tabActiveClass: "nav-tab-active",
                updateHash: false
            });
        }
        if ($dateRanges.length) setupDateRanges();
        if (accordionMenu.length) setupAccordionMenus();
    });
    function setupDateRanges() {
        $("label", $dateRanges).each(function() {
            if ($("input", this).prop("checked")) $(this).addClass("checked");
        });
        $("input:radio", $dateRanges).on("change", function(e) {
            $("label", $dateRanges).removeClass("checked");
            if ($(this).prop("checked")) $(this).parent().addClass("checked");
        });
    }
    function setupDetailSummary() {
        console.log("Setting up Detail/Summary elements...");
        $("details").details();
        $("html").addClass($.fn.details.support ? "details" : "no-details");
        $(document).on("keyup click", "summary", function(e) {
            $(window).trigger("resize").trigger("scroll");
        });
    }
    function setupAccordionMenus() {
        $("> li > a", accordionMenu).on("click", function(e) {
            if ($(this).parent().hasClass("active")) {
                $(this).parent().removeClass("active");
            } else {
                $("li", accordionMenu).removeClass("active");
                $(this).parent().addClass("active");
            }
        });
        $("li.disabled a, li.menu-item-has-children a", accordionMenu).on("click", function(e) {
            e.preventDefault();
        });
    }
})(jQuery);

(function($) {
    $.listy = function(container, options) {
        var plugin = this, $container = $(container);
        var settings, timer, delay;
        var defaults = {
            delay: 500
        };
        plugin.init = function() {
            plugin.settings = settings = $.extend({}, defaults, options);
            $container.data("listy", {});
            $(".tablenav-pages a, .manage-column.sortable a, .manage-column.sorted a", $container).on("click", function(e) {
                e.preventDefault();
                var searchquery = this.search.substring(1);
                var data = {
                    paged: query(searchquery, "paged") || "1",
                    order: query(searchquery, "order") || "",
                    orderby: query(searchquery, "orderby") || "",
                    id: query(searchquery, "id") || "",
                    status: query(searchquery, "status") || "",
                    merchantstatus: query(searchquery, "merchantstatus") || "",
                    code: query(searchquery, "code") || "",
                    report: query(searchquery, "report") || ""
                };
                plugin.update(data);
            });
            $("input[name=paged]", $container).on("keyup", function(e) {
                var data = {
                    paged: parseInt($("input[name=paged]", $container).val()) || "1",
                    order: $("input[name=order]", $container).val() || "",
                    orderby: $("input[name=orderby]", $container).val() || "",
                    id: $("input[name=id]", $container).val() || "",
                    status: $("select[name=status]", $container).val() || "",
                    merchantstatus: $("select[name=merchantstatus]", $container).val() || "",
                    code: $("select[name=code]", $container).val() || "",
                    report: $("select[name=report]", $container).val() || ""
                };
                window.clearTimeout(timer);
                timer = window.setTimeout(function() {
                    plugin.update(data);
                }, delay);
            });
            $container.on("submit", function(e) {
                e.preventDefault();
                var data = $container.serialize();
                console.log(data);
                window.clearTimeout(timer);
                timer = window.setTimeout(function() {
                    plugin.update(data);
                }, delay);
            });
        };
        plugin.update = function(data) {
            $(".wp-list-table", $container).addClass("updating");
            fulldata = $.extend({
                _ajax_custom_list_nonce: $("#_ajax_custom_list_nonce", $container).val(),
                action: $("#ajaxaction", $container).val()
            }, data);
            console.log(data);
            $.ajax({
                url: ajaxurl,
                method: "POST",
                data: data,
                success: function(response) {
                    $(".wp-list-table", $container).removeClass("updating");
                    var response = $.parseJSON(response);
                    if (response.rows.length) $("#the-list", $container).html(response.rows);
                    if (response.column_headers.length) $("thead tr, tfoot tr", $container).html(response.column_headers);
                    if (response.pagination.bottom.length) $(".tablenav.top .tablenav-pages", $container).html($(response.pagination.top).html());
                    if (response.pagination.top.length) $(".tablenav.bottom .tablenav-pages", $container).html($(response.pagination.bottom).html());
                    plugin.init();
                },
                error: function(response) {
                    $(".wp-list-table", $container).removeClass("updating");
                    console.log(response["statusText"]);
                }
            });
        };
        plugin.publicMethods = {};
        var query = function(query, variable) {
            var vars = query.split("&");
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split("=");
                if (pair[0] == variable) return pair[1];
            }
            return false;
        };
        plugin.init();
    };
    $.fn.listy = function(options) {
        var args = arguments;
        return this.each(function() {
            var $this = $(this), plugin = $this.data("listy");
            if (undefined === plugin) {
                plugin = new $.listy(this, options);
                $this.data("listy", plugin);
            }
            if (plugin.publicMethods[options]) {
                return plugin.publicMethods[options](Array.prototype.slice.call(args, 1));
            }
        });
    };
})(jQuery);

(function($) {
    $.filtery = function(container, options) {
        var plugin = this, $container = $(container);
        var settings, timer, delay;
        var defaults = {
            delay: 300
        };
        plugin.init = function() {
            plugin.settings = settings = $.extend({}, defaults, options);
            $container.data("filtery", {});
            $container.on("submit", function(e) {
                e.preventDefault();
                var data = $container.serializeArray();
                plugin.update(data);
            });
        };
        plugin.update = function(data) {
            var target = "#" + data.report + ".report";
            if ($(target).length == 0) {
                $(".report").addClass("updating");
                $(".report").last().after("<div class='report' id='" + data.report + "' style='display:none;'></div>");
                $.ajax({
                    url: ajaxurl,
                    data: $.extend({
                        _ajax_report_nonce: $("#_ajax_report_nonce", $container).val(),
                        action: $("#ajaxaction", $container).val()
                    }, data),
                    success: function(response) {
                        console.log(response);
                        $(".report").hide(0).removeClass("updating");
                        $(target).html(response).show(0);
                    },
                    error: function(response) {
                        $(".report").removeClass("updating");
                    }
                });
            } else {
                $(".report").addClass("updating").delay(300).hide(0, function() {
                    $(target).show(0).delay(300).removeClass("updating");
                });
            }
        };
        plugin.publicMethods = {};
        var query = function(query, variable) {
            var vars = query.split("&");
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split("=");
                if (pair[0] == variable) return pair[1];
            }
            return false;
        };
        plugin.init();
    };
    $.fn.filtery = function(options) {
        var args = arguments;
        return this.each(function() {
            var $this = $(this), plugin = $this.data("filtery");
            if (undefined === plugin) {
                plugin = new $.filtery(this, options);
                $this.data("filtery", plugin);
            }
            if (plugin.publicMethods[options]) {
                return plugin.publicMethods[options](Array.prototype.slice.call(args, 1));
            }
        });
    };
})(jQuery);