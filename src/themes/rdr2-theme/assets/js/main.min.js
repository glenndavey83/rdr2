(function($) {
    var PortalContainer = $("#PlayerPortal");
    $(document).ready(function() {
        if (PortalContainer.length) PortalContainer.filtery();
    });
})(jQuery);

(function($) {
    $.filtery = function(container, options) {
        var plugin = this, $container = $(container);
        var settings, timer, delay;
        var defaults = {
            delay: 300
        };
        plugin.init = function() {
            plugin.settings = settings = $.extend({}, defaults, options);
            $container.data("filtery", {});
            plugin.update(data);
        };
        plugin.update = function(data) {
            $container.addClass("updating");
            $.ajax({
                url: ajaxurl,
                data: $.extend({
                    _ajax_portal_nonce: $("#_ajax_portal_nonce").val(),
                    action: $("#ajaxaction").val()
                }, data),
                success: function(response) {
                    console.log(response);
                    $container.hide(0).removeClass("updating");
                    $container.html(response).show(0);
                },
                error: function(response) {
                    $container.removeClass("updating");
                }
            });
        };
        plugin.publicMethods = {};
        var query = function(query, variable) {
            var vars = query.split("&");
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split("=");
                if (pair[0] == variable) return pair[1];
            }
            return false;
        };
        plugin.init();
    };
    $.fn.filtery = function(options) {
        var args = arguments;
        return this.each(function() {
            var $this = $(this), plugin = $this.data("filtery");
            if (undefined === plugin) {
                plugin = new $.filtery(this, options);
                $this.data("filtery", plugin);
            }
            if (plugin.publicMethods[options]) {
                return plugin.publicMethods[options](Array.prototype.slice.call(args, 1));
            }
        });
    };
})(jQuery);